@page "/simulation"
@layout MainLayout
@using System.Text.Json
@inject HubProcessorService HubSvc
@implements IDisposable
<PageTitle>Dashboard IoT Sederhana</PageTitle>
<MudButton @onclick="RandomizeData" Variant="Variant.Filled" Color="Color.Primary">@LabelBtn</MudButton>
<MudButton @onclick="Setup" Variant="Variant.Filled" Color="Color.Primary">Get Data From IoT Hub</MudButton>
<MudGrid>
    <MudItem xs="12">
        <MudChart ChartType="ChartType.Line" ChartSeries="@TdsSeries" @bind-SelectedIndex="idx" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
    </MudItem>
    <MudItem xs="12">
        <MudChart ChartType="ChartType.Line" ChartSeries="@TorenSeries" @bind-SelectedIndex="idx" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
    </MudItem>
    <MudItem xs="12">
        <MudChart ChartType="ChartType.Line" ChartSeries="@PhSeries" @bind-SelectedIndex="idx" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
    </MudItem>
</MudGrid>

@code {
    bool HasStart = false;
    string LabelBtn = "Start Simulation";
    int idx = -1;
    bool IsRunning = false;
    public List<WaterPositive.Kiosk.Data.WaterSensorData> TimeSeriesData { get; set; } = new();
    public List<ChartSeries> TdsSeries = new List<ChartSeries>()
{
        new ChartSeries() { Name = "TDS", Data = new double[] { } },

    };
    public List<ChartSeries> TorenSeries = new List<ChartSeries>()
{
        new ChartSeries() { Name = "Toren", Data = new double[] { } },

    };
    public List<ChartSeries> PhSeries = new List<ChartSeries>()
{
        new ChartSeries() { Name = "Ph", Data = new double[] { } },

    };
    public string[] XAxisLabels = { };

    Random random = new Random();
    protected override void OnInitialized()
    {
        HubSvc.MessageReceived += ReceiveMessage;  
    }

    async void ReceiveMessage(object sender, MessageReceiveArgs msg)
    {
        var obj = JsonSerializer.Deserialize<WaterPositive.Kiosk.Data.WaterSensorData>(msg.Message);
        if (obj != null)
        {
            TimeSeriesData.Add(obj);
            await RefreshChart();
        }
    }
    public void Dispose()
    {
        HubSvc.MessageReceived -= ReceiveMessage;
    }
    private const string DEFAULT_CONSUMER_GROUP = "$Default";
    async Task Setup()
    {
        if (HasStart) return;
        await HubSvc.Start("myFirstDevice", "HostName=BmcIoTHub.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=1hyvQvLk7mWsQmBJ/MuTxWqiwr1nqtNnBs6gNqspta4=", DateTime.Now, DEFAULT_CONSUMER_GROUP);
        HasStart = true;
    }
    async Task Cancel()
    {
        HubSvc.Cancel();
        HasStart = false;
    }
    int DataPoints = 10;
    public async Task RandomizeData()
    {
        if (IsRunning)
        {
            IsRunning = false;
            LabelBtn = "Start Simulation";
            return;
        }
        else
        {
            LabelBtn = "Stop Simulation";
            IsRunning = true;
        }


        TimeSeriesData.Clear();
        while (IsRunning)
        {
            var newItem = new WaterPositive.Kiosk.Data.WaterSensorData() { TimeStamp= DateTime.Now, Message = "FLOWING", Result = true, Data = new DataSensor() { Ph = random.Next(1, 7), Tds = random.Next(150, 1000), Toren = random.Next(1, 30), Flow = random.Next(1, 100) } };
        TimeSeriesData.Add(newItem);
            await RefreshChart();
            await Task.Delay(1000);
        }
    }

    async Task RefreshChart()
    {
        TdsSeries[0].Data = TimeSeriesData.Select(x => x.Data.Tds).TakeLast(DataPoints).ToArray();
        PhSeries[0].Data = TimeSeriesData.Select(x => x.Data.Ph).TakeLast(DataPoints).ToArray();
        TorenSeries[0].Data = TimeSeriesData.Select(x => x.Data.Toren).TakeLast(DataPoints).ToArray();
        XAxisLabels = TimeSeriesData.Select(x => x.TimeStamp.ToString("HH:mm:ss")).TakeLast(DataPoints).ToArray();
        await InvokeAsync(StateHasChanged);
      
    }
}
