@page "/index"
@page "/"
@layout EmptyLayout
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ZXingBlazor.Components
@inject NavigationManager NavMgr
@inject UserProfileService UserSvc
@inject AppState AppState
@inject IJSRuntime IJS
@inject BarcodeInterceptor barcodeScanner
@inject AudioPlayer Player
@implements IDisposable
<div class="container flex-row">
    <div class="header">
        <div class="logos">
            <a class="logo-water" href="/"><img src="assets/img/water-positif.svg" alt=""></a>
            <a class="logo-aws" href=""><img src="assets/img/aws.svg" alt=""></a>
            <a class="logo-habitat" href=""><img src="assets/img/habitat-id.svg" alt=""></a>
            <a class="logo-alkademi" href=""><img src="assets/img/alkademi.svg" alt=""></a>
        </div>
        <div class="title">
            OUTLET AIR BERSIH
        </div>
    </div>
    <div class="message">
        Silahkan Scan QR dengan kartu Anda atau masukkan No Kartu dan PIN
    </div>
    <div class="content login-content">
        <div class="login-form">
            <form action="">
                <div class="input">
                    <label for="txtNoKartu">No Kartu</label>
                    <div class="text @TxtKartuClass" @onkeydown="KeyDown" @ref="myDiv" @onclick="()=>ChangeMode(InputModes.Kartu)" id="txtNoKartu">@UID</div>
                    <input type="hidden" @bind="UID" id="txtNoKartu_hidden" name="txtNoKartu_hidden">
                </div>
                <div class="input">
                    <label for="txtPin">PIN</label>
                    <div class="text mask @TxtPinClass" @onclick="()=>ChangeMode(InputModes.Pin)" id="txtPin">@PIN_MASK</div>
                    <input type="hidden" @bind="PIN" id="txtPin_hidden" name="txtPin_hidden">
                </div>
                @if (errors.Count > 0)
                {
                    <div class="input">
                        <ul class="alert">
                            @foreach (var error in errors)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    </div>
                }
            </form>
            <div class="footer">
                <button class="green" @onclick="@(()=>Submit())">Masuk</button>
                <button class="gray" @onclick="@(()=>Reset())">Ulang</button>
                <button style="display:none;" class="orange" @onclick="ShowScanner">Scan QR</button>
            </div>
        </div>
        <div class="keypad">
            <div @onclick='()=>InputKey("1")' class="key" data-key="1">1</div>
            <div @onclick='()=>InputKey("2")' class="key" data-key="2">2</div>
            <div @onclick='()=>InputKey("3")' class="key" data-key="3">3</div>
            <div @onclick='()=>InputKey("4")' class="key" data-key="4">4</div>
            <div @onclick='()=>InputKey("5")' class="key" data-key="5">5</div>
            <div @onclick='()=>InputKey("6")' class="key" data-key="6">6</div>
            <div @onclick='()=>InputKey("7")' class="key" data-key="7">7</div>
            <div @onclick='()=>InputKey("8")' class="key" data-key="8">8</div>
            <div @onclick='()=>InputKey("9")' class="key" data-key="9">9</div>
            <div @onclick="Delete" class="key" data-key="D">Del</div>
            <div @onclick='()=>InputKey("0")' class="key" data-key="0">0</div>
            <div @onclick="Enter" class="key" data-key="E">Enter</div>
        </div>
    </div>

    @if (ShowScanBarcode)
    {
        <BarcodeReader ScanResult="((e) => { UID =e; ShowScanBarcode = !ShowScanBarcode; })"
                       Close="(()=>ShowScanBarcode=!ShowScanBarcode)"
                       ScanBtnTitle="Scan"
                       ResetBtnTitle="Reset"
                       CloseBtnTitle="Close"
                       SelectDeviceBtnTitle="Select Device" />
    }
</div>
@code {
    string TxtKartuClass = "active";
    string TxtPinClass = "";
    string PIN_MASK = "";
    enum InputModes {Kartu,Pin}
    InputModes CurrentMode = InputModes.Kartu;
    protected ElementReference myDiv;  // set by the @ref attribute
    async Task Delete()
    {
        switch (CurrentMode)
        {
            case InputModes.Kartu:
                UID = string.Empty;
                break;
            case InputModes.Pin:
                PIN = string.Empty;
                PIN_MASK = string.Empty;
                break;
        }
        Player.Click();
    }

    async Task Enter()
    {
       
        await Submit();
    }

    async Task InputKey(string CharInput)
    {
        switch (CurrentMode)
        {
            case InputModes.Kartu:
                UID += CharInput;
                break;
            case InputModes.Pin:
                PIN += CharInput;
                PIN_MASK = "";
                for (var i= 0; i < PIN.Length; i++)
                {
                    PIN_MASK += "*";
                }
                break;
        }
        Player.Click();
    }

    async Task ChangeMode(InputModes mode)
    {
        CurrentMode = mode;
        switch (CurrentMode)
        {
            case InputModes.Kartu:
                TxtKartuClass = "active";
                TxtPinClass = "";
                break;
            case InputModes.Pin:
                TxtKartuClass = "";
                TxtPinClass = "active";
                break;
        }
    }

    async Task Reset()
    {
        Player.Click();
        PIN = string.Empty;
        PIN_MASK = string.Empty;
        UID = string.Empty;
        await ChangeMode(InputModes.Kartu);
        if (!AppConstants.NeedMaintenance)
            errors.Clear();
        //await IJS.InvokeVoidAsync("SetFocus", "txtNoKartu");
    }
    protected void KeyDown(KeyboardEventArgs e)
    {
        PIN += e.Key;
        //letter = $"Pressed: [{e.Key}]";
    }
    async Task KeyUp(KeyboardEventArgs e)
    {


        /*
        if (e.Key == "Enter")
    {
    Submit();
    }
    */
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ChangeMode(InputModes.Kartu);
            await IJS.InvokeVoidAsync("SetFocusToElement", myDiv);
            //await IJS.InvokeVoidAsync("SetFocus", "txtNoKartu");

        }
    }
    protected override void OnInitialized()
    {
        barcodeScanner.SetHook();
        barcodeScanner.BarcodeScanned += async (object? a,BarcodeScanArgs b) =>
        {
            UID = b.Barcode;
            await Submit();
            await InvokeAsync(StateHasChanged);
        };
    }
    async Task ShowScanner()
    {
        ShowScanBarcode = !ShowScanBarcode;
    }
    bool success;
    bool ShowScanBarcode = false;
    List<string> errors = new();
    MudForm form;
    string UID, PIN;
    async Task <IEnumerable<string>> CheckPin(string pin)
    {
        var errorMessages = new List<string>();
        if (string.IsNullOrEmpty(UID)){
            errorMessages.Add( "Silakan Masukan No Kartu");
            return errorMessages;
        }
        var res = UserSvc.GetDataByUID(UID);
        if (res != null)
        {
            if (!string.IsNullOrEmpty(res.PIN))
                if (string.IsNullOrEmpty(pin))
                {
                    //IJS.InvokeVoidAsync("SetFocus", "txtPin");
                    await ChangeMode(InputModes.Pin);
                    errorMessages.Add( "Silakan Input PIN.");
                }
                else
                if (res.PIN != pin)
                {
                    errorMessages.Add( "PIN Salah, Silakan Ulang Kembali.");
                }
        }
        else
        {
            errorMessages.Add( "No Kartu Salah, Silakan Ulang Kembali.");
        }
        return errorMessages;
    }

    async Task Submit()
    {
        if (AppConstants.NeedMaintenance)
        {
            var Pesan = "Terjadi kendala, silakan hubungi petugas. Perlu prosedur reset.";
            MessageBox.Show(Pesan,"Terjadi Problem");
            errors.Clear();
            errors.Add(Pesan);
        }
        Player.Click();
        var res = await CheckPin(PIN);
        if (res.Any())
        {
            errors.Clear();
            errors.AddRange(res);
        }
        else
        { 
            var user = UserSvc.GetDataByUID(UID);
            AppState.CurrentUser = user;
            NavMgr.NavigateTo("outlet");
        }
    }
    public void Dispose()
    {
        barcodeScanner.UnHook();
    }
}