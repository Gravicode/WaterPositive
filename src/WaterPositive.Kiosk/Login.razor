@page "/index"
@page "/"
@layout EmptyLayout
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ZXingBlazor.Components
@inject NavigationManager NavMgr
@inject UserProfileService UserSvc
@inject AppState AppState
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form">
                <MudTextField T="string" Label="USER ID" @bind-Value="UID" Required="true" RequiredError="User ID is required!" />
                <MudTextField T="string" Label="PIN" @bind-Value="PIN"  Validation="@(new Func<string, IEnumerable<string>>(CheckPin))" />
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>Submit())">Masuk</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" DisableElevation="true" OnClick="ShowScanner" Class="mx-2">Scan QR</MudButton>

        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Count})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
@if (ShowScanBarcode)
{
    <BarcodeReader ScanResult="((e) => { UID =e; ShowScanBarcode = !ShowScanBarcode; })"
               ShowScanBarcode="ShowScanBarcode"
               Close="(()=>ShowScanBarcode=!ShowScanBarcode)"
               ScanBtnTitle="Scan"
               ResetBtnTitle="Reset"
               CloseBtnTitle="Close" 
               SelectDeviceBtnTitle="Select Device" />
}
@code {

    async Task ShowScanner()
    {
        ShowScanBarcode = !ShowScanBarcode;
    }
    bool success;
    bool ShowScanBarcode = false;
    List<string> errors = new();
    MudForm form;
    string UID, PIN;
    private IEnumerable<string> CheckPin(string pin)
    {
        if (string.IsNullOrEmpty(UID))
            yield return "Input UID first";
        var res = UserSvc.GetDataByUID(UID);
        if (res != null)
        {
            if (!string.IsNullOrEmpty(res.PIN))
            if (res.PIN != pin)
            {
                yield return "wrong PIN, try again.";
            }
        }
        else
        {
            yield return "Unknown UID, try again.";
        }
        
        }

        async Task Submit()
        {
            var res = CheckPin(PIN);
            if (res.Any())
            {
                errors.Clear();
                errors.AddRange(res);
            }
            else
            {
                var user = UserSvc.GetDataByUID(UID);
                AppState.CurrentUser = user;
                NavMgr.NavigateTo("outlet");
            }
        }

}