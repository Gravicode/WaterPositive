@page "/outlet"
@using System.Text.Json;
@inject NavigationManager NavMgr
@inject WaterPriceService PriceSvc
@inject WaterUsageService UsageSvc
@inject AppState AppState
@inject SerialDevice device
@implements IDisposable

<div class="container">
    <div class="header">
        <div class="logos">
            <a class="logo-water" href="/"><img src="assets/img/water-positif.svg" alt=""></a>
            <a class="logo-aws" href=""><img src="assets/img/aws.svg" alt=""></a>
            <a class="logo-habitat" href=""><img src="assets/img/habitat-id.svg" alt=""></a>
            <a class="logo-alkademi" href=""><img src="assets/img/alkademi.svg" alt=""></a>
        </div>
        <div class="title">
            ARGO PEMAKAIAN AIR
        </div>
    </div>
    <div class="message">
        <div class="userblock">
            <div class="user">Hai @AppState.CurrentUser?.FullName</div>
            <div class="date">@CurrentTime.ToString("dd MMM yyyy HH:mm:ss")</div>
        </div>
    </div>
    <div class="content">
        <form action="">
            <div class="input">
                <label for="txtNoKartu">Liter (L)</label>
                <input type="text" id="txtNoKartu" @bind="Volume" readonly />
            </div>
            <div class="input">
                <label for="txtPin">Harga (Rp)</label>
                <input type="text" id="txtPin" @bind="Price" readonly />
            </div>
            <div class="input">
                <label for="txtLog">Logs</label>
                <ul class="div-scroll">
                    @foreach (var message in messages)
                    {
                        <li>@message</li>
                    }
                </ul>
            </div>
        </form>
    </div>
</div>
<div class="footer medium">
    <button class="green" @onclick="Open">Buka Keran</button>
    <button class="red" @onclick="Close">Tutup Keran</button>
    <button class="orange" @onclick="End">Selesai</button>
</div>

@code {
    long ErrorCount = 0;
    DateTime CurrentTime = DateTime.Now;
    BlazorTimer timer;
    WaterPrice CurrentPrice;
    double Volume = 0;
    double Price = 0;
    bool IsFlowing = false;
    string CommandStr = string.Empty;
    bool success;
    List<string> messages = new();

    async Task Reset()
    {
        messages.Clear();
    }
    async Task ResetDevice()
    {

        CommandStr = "RESET";
        await SendCommand();

    }

    void IDisposable.Dispose()
    {
        device.Dispose();
    }
    async Task Open()
    {
        if (IsFlowing) return;
        CommandStr = "OPEN";
        await SendCommand();
        IsFlowing = true;
    }
    async Task Close()
    {
        if (!IsFlowing) return;
        CommandStr = "CLOSE";
        IsFlowing = false;
        await SendCommand();
    }
    async Task End()
    {
        if (IsFlowing)await Close();
        //insert to db
        if (Volume > 0)
        {
            WaterUsage usage = new WaterUsage() { UserId = AppState.CurrentUser.Id, TotalHarga = Price, Tanggal = DateTime.Now, Volume = Volume, WaterDepotId = AppConstants.WaterDepotId };
            var res = UsageSvc.InsertData(usage);
            if (res)
            {
                AppState.CurrentUser = null;
            }
        }
        NavMgr.NavigateTo("/");


    }
    protected override async Task OnInitializedAsync()
    {
        CurrentPrice = PriceSvc.GetCurrent();

        device.DataReceived += async (s, x) =>
        {
            try
            {
                WaterSensorData? res = JsonSerializer.Deserialize<WaterSensorData>(x.Data);
                if (res != null)
                {
                    messages.Add($"[{DateTime.Now}] => ({res.Result}) : {(res.Data==null ? res.Message : res.Data)}");
                    switch (res.Message)
                    {
                        case "FLOWING":
                            //var msg = JsonSerializer.Deserialize<WaterUsage>(res.Data);
                            //var msg = JsonSerializer.Deserialize<DataSensor>(res.Data);
                            if (res.Data != null)
                            {
                                Volume = res.Data.Flow;
                                Price = (CurrentPrice.PricePerLiter / 1000) * Volume;
                            }

                            break;
                    }
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception ex)
            {
                ErrorCount++;
                if (ErrorCount > 3)
                {
                    if (IsFlowing) await Close();
                    AppConstants.NeedMaintenance = true;
                    MessageBox.Show("Terjadi masalah pada alat, hubungi petugas, dan lakukan prosedur reset.", "Warning");
                }
                Console.WriteLine(ex);
            }
        };
        await ResetDevice();
        timer = new();
        timer.SetTimer(1000);
        timer.OnElapsed += async () =>
        {
            CurrentTime = DateTime.Now;
            await InvokeAsync(StateHasChanged);
        };
    }
    protected override void OnInitialized()
    {

    }
    async Task SendCommand()
    {
        var res = device.SendMessage(CommandStr.ToUpper());
        if (res)
        {
            CommandStr = string.Empty;
        }

    }
}
