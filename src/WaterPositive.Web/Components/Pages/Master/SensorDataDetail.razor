@inject IJSRuntime jsRuntime
@using System.IO
@inject IToastService toastService
@inject SensorDataService service
@inject AzureBlobHelper blob;

@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3 mb-n1" />
            @CustomHeader
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@TaskObject" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <input type="hidden" @bind="@TaskObject.Id" />
                            <MudTextField Label="Tanggal" HelperText="Tanggal"  @bind-Value="TaskObject.Tanggal" For="@(() => TaskObject.Tanggal)" />
                            <MudTextField Label="Pressure" Class="mt-3" @bind-Value="TaskObject.Pressure" For="@(() => TaskObject.Pressure)" InputType="InputType.Text" />
                            <MudTextField Label="Dissolve Oxygen" Class="mt-3" @bind-Value="TaskObject.DO" For="@(() => TaskObject.DO)" InputType="InputType.Text" />
                            <MudTextField Label="Ph" Class="mt-3" @bind-Value="TaskObject.Ph" For="@(() => TaskObject.Ph)" InputType="InputType.Text" />
                            <MudTextField Label="TDS" Class="mt-3" @bind-Value="TaskObject.Tds" For="@(() => TaskObject.Tds)" InputType="InputType.Text" />
                            <MudTextField Label="Temperature" Class="mt-3" @bind-Value="TaskObject.Temperature" For="@(() => TaskObject.Temperature)" InputType="InputType.Text" />
                            <MudTextField Label="Water Level" Class="mt-3" @bind-Value="TaskObject.WaterLevel" For="@(() => TaskObject.WaterLevel)" InputType="InputType.Text" />
                            <MudTextField Label="Device ID" Class="mt-3" @bind-Value="TaskObject.DeviceId" For="@(() => TaskObject.DeviceId)" InputType="InputType.Text" />


                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-2">Simpan</MudButton>
                            <MudButton ButtonType="ButtonType.Button" OnClick="Cancel" Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>

            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    [Parameter]
    public string CustomHeader { get; set; }
    [Parameter]
    public SensorData TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }
    private void OnValidSubmit(EditContext context)
    {
        if (TaskObject.Id == 0)
        {

            var hasil = service.InsertData(TaskObject);
            if (!hasil)
            {
                Snackbar.Add("Gagal menyimpan data. Isi data dengan lengkap.", Severity.Error);
                //toastService.ShowError("Gagal menyimpan data. Isi data dengan lengkap.", "Perhatian");
            }
        }
        else
        {
            TaskObject.UpdatedDate = DateHelper.GetLocalTimeNow();

            service.UpdateData(TaskObject);
        }

        //In a real world scenario this bool would probably be a service to delete the item from api/database
        Snackbar.Add("Data Saved", Severity.Success);
        MudDialog.Close(DialogResult.Ok(TaskObject.Id));
        DataChanged?.Invoke();
    }

}
