using EllipticCurve.Utils;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Runtime.Serialization;
using System.Security.Claims;
using System.Text;

namespace WaterPositive.Web.Data
{
    public interface IRestApiService
    {
        RestApiUser Authenticate(string APIKey);
        IEnumerable<RestApiUser> GetAll();
    }

    public class RestApiService : IRestApiService
    {
        // users hardcoded for simplicity, store in a db with hashed passwords in production applications
        private List<RestApiUser> _users = new List<RestApiUser>
        {
            new RestApiUser {  Id=1, FirstName="Test", LastName="User", Username="TestUser", Password = "test" }
        };

        private readonly AppSettings _appSettings;
        public IConfiguration Configuration { get; set; }
        public RestApiService(IOptions<AppSettings> appSettings,IConfiguration config)
        {
            this.Configuration = config;
            _appSettings = appSettings.Value;
        }

        public RestApiUser Authenticate(string ApiKey)
        {
            var user = _users.FirstOrDefault();

            // return null if user not found
            if (ApiKey != AppConstants.APIKEY)
                return null;

            // remove password before returning
            user.Password = null;

            var issuer = Configuration["Jwt:Issuer"];
            var audience = Configuration["Jwt:Audience"];
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.ASCII.GetBytes(Configuration["Jwt:Key"]);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim("Id", "1"),
                new Claim(JwtRegisteredClaimNames.Sub, user.Username),
                new Claim(JwtRegisteredClaimNames.Email, user.Username),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = DateTime.UtcNow.AddHours(6),
                Audience = audience,
                Issuer = issuer,
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);

            user.Token = jwtToken;

            return user;
        }

        public IEnumerable<RestApiUser> GetAll()
        {
            // return users without passwords
            return _users.Select(x => {
                x.Password = null;
                return x;
            });
        }
    }
    [DataContract]
    public class OutputRest
    {
        [DataMember(Order = 1)]
        public bool Result { get; set; }
        [DataMember(Order = 2)]
        public string Message { get; set; }
        [DataMember(Order = 3)]
        public object Data { get; set; }
    }
    public class ServiceAuth
    {
        public string APIKey { get; set; }
    }
    public class RestApiUser
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string Token { get; set; }
    }
}
